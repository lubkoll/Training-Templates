#include <algorithm>
#include <memory>
#include <vector>

#include "new_and_delete.hh"

class Vector
{
public:
    Vector() = default;

    explicit Vector(std::vector<int>&& data)
        : data_( std::move(data) )
    {}

    void set_data(const std::vector<int>& data)
    {
        data_ = data;
    }

private:
    std::vector<int> data_;
};


std::vector<int> create_vector()
{
    return std::vector<int>(200,73);
}


class NonCopyable
{
public:
    NonCopyable() = default;

    NonCopyable(const NonCopyable&) = delete;
    NonCopyable& operator=(const NonCopyable&) = delete;

    NonCopyable(NonCopyable&&) = default;
    NonCopyable& operator=(NonCopyable&&) = default;
};

bool operator<(const NonCopyable&,const NonCopyable&)
{
    return false;
}

#include "overloading_member_functions_using_reference_qualifiers.hh"


int main()
{
    // New reference declarator '&&'
    // Allows to distinguish between lvalues and rvalues, i.e.
    // values that can be on the left side of '=' and values that only can be on the right hand side
    int a = 42;

    int& b = a;     // b is an lvalue reference

    int&& c = 73;   // c is an lvalue reference, but has rvalue reference type,
                    // 73 is an rvalue (rule of thumb, rvalues are objects for which you cannot take the address)

    // We can make a rvalue reference out of c
    int&& d = std::move(c);

    // std::move does not move anything but casts, i.e.
    int&& e = static_cast<int&&>(d);


    // Use case: we can steal resources, mainly from temporaries, instead of copying them.
    std::vector<int> initial_object = create_vector();
    std::cout << "After initialization: initial_object.size() = " << initial_object.size() << '\n';

    std::vector<int> big_object = std::move(initial_object);
    std::cout << "After move-operation: initial_object.size() = " << initial_object.size() << '\n';
    std::cout << "After move-operation: big_object.size() = " << big_object.size() << end_block;
}

// Special member function generation

namespace cpp98
{
    // Special member functions (possibly generated by the compiler).
    class Vector
    {
    public:
        /* Default constructor
         *
         * Generated if there is no user-declared constructor.
         */
        Vector();

        /* Destructor
         *
         * Generated if there is no user-declared destructor.
         */
        ~Vector();

        /* Copy constructor
         *
         * Generated if there is no user-declared copy-constructor.
         */
        Vector(const Vector&);

        /* Copy-assignment operator
         *
         * Generated if there is no user-declared copy-assignment operator.
         */
        Vector& operator=(const Vector&);
    };

    /* The rule of three
     *
     * If you declare any one of copy constructor, copy assignment or destructor, then declare all three.
     */
}

namespace cpp11
{
    // Special member functions (possibly generated by the compiler).
    class Vector
    {
    public:
        /* Default constructor
         *
         * Generated if there is no user-declared constructor.
         */
        Vector();

        /* Destructor
         *
         * Generated if there is no user-declared destructor.
         */
        ~Vector();

        /* Copy constructor
         *
         * Generated if there is no user-declared copy-constructor or move-operation.
         */
        Vector(const Vector&);

        /* Copy-assignment operator
         *
         * Generated if there is no user-declared copy-assignment operator or move operation.
         */
        Vector& operator=(const Vector&);

        /* Move constructor
         *
         * Generated if there is no user-declared destructor, copy-operation or move-operation.
         */
        Vector(Vector&&);

        /* Move-assignment operator
         *
         * Generated if there is no user-declared destructor, copy-operation or move-operation.
         */
        Vector& operator=(Vector&&);
    };

    /* The rule of five
     *
     * If you declare any one of copy or move constructor, copy or move assignment or destructor, then declare all five.
     */
}
